
import { AsyncPipe, DatePipe, NgFor, NgIf } from '@angular/common';
import { Component, ElementRef, inject, OnInit,ViewChild } from '@angular/core';
import { FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MasterService } from '../../services/master.service';
import { Observable } from 'rxjs';
import { Employee, Project, ProjectEmployee } from '../../model/Employee';
import { EmployeeService } from '../../services/employee.service';



@Component({
  selector: 'app-project',
  imports: [NgIf,ReactiveFormsModule,NgFor,AsyncPipe,DatePipe,FormsModule],
  templateUrl: './project.component.html',
  styleUrl: './project.component.css'
})
export class ProjectComponent implements OnInit {
    
  @ViewChild("myModal")  employeeModal : ElementRef |undefined;

  currentView: string = "List";

  projectForm: FormGroup = new FormGroup({});
  projectEmployee: ProjectEmployee =new  ProjectEmployee();
  
  employeeSrv=inject(EmployeeService);
  projectList: Project[]= [];
  projectEmployeeList: ProjectEmployee[]= [];


  employeeData$: Observable<Employee[]> = new Observable<Employee[]>();

  constructor(){
      this.initializeForm();
      this.employeeData$ = this.employeeSrv.getEmployes();
  }
  ngOnInit(): void {
    this.getAllProject();
  }
    
  onAddEmployees(id : number){
    this.getAllProjectEmployyes(id);
    this.projectEmployee.projectId =id;
    if(this.employeeModal){
      this.employeeModal.nativeElement.style.display ='block';
    }
 

  }

  closeModal(){
    if(this.employeeModal){
      this.employeeModal.nativeElement.style.display ='none';
    }
 

  }

  onEdit(projectData : Project){
    this.initializeForm(projectData);

  }

  initializeForm(project?: Project){
    this.projectForm = new FormGroup({
        projectId: new FormControl(project ? project.projectId:0),
        projectName: new FormControl(project ? project.projectName:""),
        clientName: new FormControl(project ? project.clientName:""),
        startDate: new FormControl(project ? project.startDate:""),
        leadByEmpId: new FormControl(project ? project.leadByEmpId:""),
        contactPerson: new FormControl(project ? project.contactPerson:""),
        contactNo:new FormControl(project ? project.contactNo:""),
        emailId: new FormControl(project ? project.emailId:"")
        
    });

    this.currentView = "Create"
  }

  onAddEmp(){
    this.employeeSrv.addNewProjectEmployee(this.projectEmployee).subscribe((res:ProjectEmployee)=>{
      debugger
         alert("Employee Added to project ");
         this.getAllProjectEmployyes(this.projectEmployee.projectId);
    },error=>{

    })
  }

  onSaveProject(){
    const formValue = this.projectForm.value;
    if(formValue.projectId == 0){
      this.employeeSrv.createNewProject(formValue).subscribe((res:Project)=>{
        debugger
           alert("Project Created Success");
           this.getAllProject();
      },error=>{
  
      }) 
      } else{
        this.employeeSrv.updateProject(formValue).subscribe((res:Project)=>{
          debugger
             alert("Project Updated Success");
             this.getAllProject();
        },error=>{
    
        })
      }
    }
    
  

  getAllProject(){
    
    this.employeeSrv.getProjects().subscribe((res:Project[])=>{
      debugger
         this.projectList = res;
    },error=>{

    })
  }

  getAllProjectEmployyes(id: number){
    debugger;
    this.employeeSrv.getProjectEmployee().subscribe((res:ProjectEmployee[])=>{
      debugger
      const record = res.filter(m=>m.projectId == id);
         this.projectEmployeeList = res;
    },error=>{

    })
  }

  


}
